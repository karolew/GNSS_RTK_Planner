swagger: "2.0"
info:
  version: "1.0"
  title: "RTK Planner"
  description: "This is for path planning."

paths:
  /rover/register:
    post:
      description: "Register device in application."
      operationId: "rover.register"
      parameters:
        - name: mac
          in: body
          description: "Rover MAC address."
          schema:
            type: string
            required:
              - mac
            properties:
              mac:
               type: string
      responses:
        200:
          description: "Rover already registered."
        400:
          $ref: "#/responses/400Error"

  /rover/check_mac/{mac}:
    get:
      description: "Check if a MAC address already exists"
      operationId: "rover.check_mac_exists"
      parameters:
        - name: mac
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Result of MAC check"
          schema:
            type: object
            properties:
              exists:
                type: boolean

  /rover/get_coords:
    get:
      description: "Refresh coordinates on page"
      operationId: "rover.get_coords"
      responses:
        200:
          description: "Refresh GNSS possition data."
          schema:
            $ref: "#/definitions/GNSSdata"

  /rover/update_gps:
    post:
      description: "Send GNSS data to server."
      operationId: "rover.update_gps"
      parameters:
        - name: gnssdata
          in: body
          description: "GNSS data."
          schema:
            $ref: "#/definitions/GNSSdata"
      responses:
        200:
          description: "Successfully get GNSS data."
        400:
          $ref: "#/responses/400Error"

  /rover/{name}:
    get:
      description: "Get rover by name."
      operationId: "rover.get_by_name"
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        200:
          description: "Successfully get rover by name"
          schema:
            $ref: "#/definitions/Rover"
        400:
          $ref: "#/responses/400Error"

  /rover:
    get:
      description: "Get all rovers."
      operationId: "rover.get_all"
      responses:
        200:
          description: "Successfully get rovers as list."
          schema:
            type: array
            items:
              $ref: "#/definitions/Rover"
    post:
      description: "Create rover."
      operationId: "rover.create_rover"
      parameters:
        - name: rover
          in: body
          description: "Rover data."
          schema:
            $ref: "#/definitions/Rover"
      responses:
        200:
          description: "Successfully get GNSS data."
        400:
          $ref: "#/responses/400Error"


  /trail:
    get:
      description: "Get all available trails"
      operationId: "trail.get_all"
      responses:
        200:
          description: "Successfully get trails as list."
          schema:
            type: array
            items:
              $ref: '#/definitions/Trail'

  /trail/{rover_id}:
    get:
      description: "Get trails for a specific rover"
      operationId: "trail.get_trails_by_rover"
      parameters:
        - name: rover_id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: "New Rover createdr"
          schema:
            type: object
            items:
              $ref: '#/definitions/Rover'
        404:
          $ref: "#/responses/400Error"

definitions:
  Rover:
    type: object
    required:
      - mac
      - name
    properties:
      mac:
        type: string
      name:
        type: string
      status:
        type: integer
      last_active:
        type: string

  Trail:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      trail_points:
        type: string

  GNSSdata:
    type: string
    required:
      - fix_status
      - latitude
      - longitude
    properties:
      fix_status:
        type: string
      latitude:
        type: string
      longitude:
        type: string
      lat_raw:
        type: string
      lon_raw:
        type: string
      speed:
        type: string
      course:
        type: string
      time_utc:
        type: string
      last_update:
        type: string

responses:
  400Error:
    description: "Invalid request."
    schema:
      type: object
      properties:
        message:
          type: string
